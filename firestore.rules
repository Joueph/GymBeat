rules_version = '2';
service cloud.firestore {
match /databases/{database}/documents {

// =================================================================
// Funções de Apoio (Helper Functions)
// =================================================================

function isOwner(userId) {
  return request.auth.uid == userId;
}

function isMutualFriend(userId) {
    let currentUserData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    let otherUserData = get(/databases/$(database)/documents/users/$(userId)).data;
    return (userId in currentUserData.amizades && currentUserData.amizades[userId] == true) &&
           (request.auth.uid in otherUserData.amizades && otherUserData.amizades[request.auth.uid] == true);
}

function hasSentMeRequest(requesterId) {
  let requesterData = get(/databases/$(database)/documents/users/$(requesterId)).data;
  return request.auth.uid in requesterData.amizades && requesterData.amizades[request.auth.uid] == true;
}

// NOVA FUNÇÃO: Verifica se o usuário autenticado é participante de um projeto.
function isProjectParticipant(projetoId) {
  return request.auth.uid in get(/databases/$(database)/documents/projetos/$(projetoId)).data.participantes;
}


// =================================================================
// Regras para a Coleção de Usuários (users)
// =================================================================
match /users/{userId} {
  allow read: if isOwner(userId) || isMutualFriend(userId) || hasSentMeRequest(userId);
  allow write: if isOwner(userId);

  match /publicProfile/{docId} {
    allow read: if 
      get(/databases/$(database)/documents/users/$(userId)).data.profileVisibility == 'todos' ||
      (get(/databases/$(database)/documents/users/$(userId)).data.profileVisibility == 'amigos' && 
       (isOwner(userId) || (userId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.amizades && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.amizades[userId] == true)));

    allow write: if isOwner(userId);
  }
}

// =================================================================
// Regras para Coleções de Dados do Usuário (fichas, treinos)
// =================================================================

match /fichas/{fichaId} {
  allow read: if isOwner(resource.data.usuarioId) || isMutualFriend(resource.data.usuarioId);
  allow create: if isOwner(request.resource.data.usuarioId);
  allow update, delete: if isOwner(resource.data.usuarioId);
}

match /treinos/{treinoId} {
  allow read: if isOwner(resource.data.usuarioId) || isMutualFriend(resource.data.usuarioId);
  allow create: if isOwner(request.resource.data.usuarioId);
  allow update, delete: if isOwner(resource.data.usuarioId);
}

// =================================================================
// Regras para a Coleção de Logs
// =================================================================
match /logs/{logId} {
  // ATUALIZADO: Permite a leitura se:
  // 1. O usuário for o dono do log.
  // 2. O usuário for amigo do dono do log.
  // 3. O log tiver um 'projetoId' e o usuário for participante desse projeto.
  allow read: if isOwner(resource.data.usuarioId) || isMutualFriend(resource.data.usuarioId) || 
                 (resource.data.projetoId != null && isProjectParticipant(resource.data.projetoId));
  
  allow create: if isOwner(request.resource.data.usuarioId);
  allow update, delete: if isOwner(resource.data.usuarioId);
}

// =================================================================
// Regras para a Coleção de Projetos
// =================================================================
match /projetos/{projetoId} {
  allow read: if request.auth.uid in resource.data.participantes;
  // Permite a um participante adicionar-se ao projeto (update).
  allow update: if request.auth.uid == resource.data.criadorId || 
                   (request.auth.uid in resource.data.participantes && 
                    request.resource.data.participantes.hasAny([request.auth.uid]));
  allow create: if request.auth != null && request.resource.data.criadorId == request.auth.uid;
  allow delete: if request.auth.uid == resource.data.criadorId;
}

// =================================================================
// Regras para Coleções de Modelos (Públicas)
// =================================================================

match /fichasModelos/{fichaModeloId} {
  allow read: if request.auth != null;
  allow write: if false;
}

match /treinosModelos/{treinoModeloId} {
  allow read: if request.auth != null;
  allow write: if false;
}

match /exerciciosModelos/{exercicioModeloId} {
  allow read: if request.auth != null;
  allow write: if false;
}

}
}